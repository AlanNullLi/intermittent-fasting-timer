{"version":3,"sources":["Components/Message.js","Components/Timer.js","Components/Resources.js","Components/HistoryBody.js","Components/History.js","Components/Records.js","Components/TimerControls.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","calculatePercent","timerStart","timerLength","stop","pct","Date","now","handleMsg","percent","num","newNum","goal","state","percentGoal","Math","floor","random","messages","length","setState","messageID","oldMessageID","bind","nextState","this","className","style","verticalAlign","display","justifyContent","Component","Timer","getHoursAndMinutes","timeFull","min","hours","retString","getSeconds","sec","timeDisplay","displaySecondTimer","altStop","type","format","width","Resources","target","href","HistoryBody","timeStamp","time","long","output","date","getMonth","getDate","getFullYear","getHours","amOrPm","minutes","getMinutes","minOutput","seconds","secOutput","handleExpand","id","isEmpty","showFastID","handleUnexpand","newShowFastID","filter","fast","e","note","value","flexWrap","fasts","map","startShort","startDate","startLong","endLong","endDate","plannedTimes","parseTime","plannedTime","plannedHours","plannedMinutes","plannedSeconds","actualTimes","actualTime","actualHours","actualMinutes","actualSeconds","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","passed","color","ExpansionPanelDetails","status","TextArea","placeholder","onChange","editNote","autoSize","maxRows","History","Records","pass","fail","list","longTime","findLongestFast","shortTime","findShortestFast","passRate","message","trunc","showInfo","trailColor","strokeColor","strokeWidth","TimerControls","handleHourInput","console","log","prevState","ms","handleMinuteInput","handleSecondInput","calculateTotalTime","st","handleSelect","event","custom","options","max","size","marginLeft","onClick","updatePlannedTime","newFailed","Group","defaultValue","Button","React","failedFastsMessages","successFastsMessages","App","msTime","timerTime","newSuccess","newID","successFast","currentTime","newFastList","confetti","recycle","stopTime","failedFast","totalInSeconds","remaining","stopRecycle","interval","setInterval","clearInterval","newText","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d81531dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\nimport \"antd/dist/antd.css\";\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [\n                'You got this!',\n                'WILLPOWER!!',\n                'What is hunger anyways?',\n            ],\n            oldMessageID: 0,\n            messageID: 0,\n            percentGoal: 90,\n\n        }\n\n        this.handleMsg = this.handleMsg.bind(this);\n    }\n\n    calculatePercent = (timerStart, timerLength, stop) => {\n        if (stop)\n            return 100;\n        let diff = Date.now() - timerStart;\n        let pct = 100 - 100 * (diff / timerLength);\n        if (pct < 0)\n            return 0;\n        return pct;\n    }\n\n    handleMsg = (percent, num, stop, timerLength) => {\n        let newNum = num;\n        let goal = this.state.percentGoal;\n        let changeMessage = true;\n\n        // if (goal === 90 && percent <= 10) {\n        //     changeMessage = false;\n        // }\n\n        if (percent < goal && changeMessage && percent !== 0 && percent !== 100 && timerLength >= 10000) {\n            newNum = Math.floor(Math.random() * this.state.messages.length);\n            while (newNum === num) {\n                newNum = Math.floor(Math.random() * this.state.messages.length);\n            }\n        //    console.log(goal)\n        //     if (goal - 10 === 10) {\n        //         console.log(\"happened\");\n        //         goal = 90;\n        //     } else {\n        //         goal -= 10;\n        //     }\n\n\n            this.setState({\n                percentGoal: goal - 10,\n                messageID: newNum\n            })\n        }\n    }\n\n    shouldComponentUpdate(nextState) {\n        return this.state.percentGoal !== nextState.percentGoal }\n\n    componentDidUpdate() {\n        if (this.state.percentGoal === 0 && \n            this.calculatePercent(this.props.timerStart, this.props.timerLength, this.props.stop) === 100) {\n            this.setState({\n                percentGoal: 90,\n            })\n        }\n    }\n\n    render() {\n        const {\n            stop,\n            timerLength,\n            timerStart,\n        } = this.props;\n        let percent = this.calculatePercent(timerStart, timerLength, stop);\n\n        this.handleMsg(percent, this.state.messageID, stop, timerLength);\n        // console.log(\"percent: \" + percent + \" percentGoal: \" + this.state.percentGoal);\n        // if (percent === 0) {\n        //     console.log(\"percentGoal: \" + this.state.percentGoal);\n        // }\n\n        return (\n            <div className=\"timer\" style={{ verticalAlign: \"center\" }}>\n                <br /><br />\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>{this.state.messages[this.state.messageID]}</div>\n            </div>\n        );\n    }\n\n}\n\nexport default Message","import React, { Component } from 'react';\nimport './Timer.css';\nimport { Progress } from 'antd';\nimport \"antd/dist/antd.css\";\nimport Message from './Message.js';\n\nclass Timer extends Component {\n\n\n    //gives the difference between timer in the format: \"(Hours):(Minutes)\"\n    getHoursAndMinutes = (timerStart, timerLength, stop, now) => {\n        let diff = now - timerStart;\n        let timeFull = timerLength - diff;\n        let msInHour = 3600000;\n        let msInMinute = 60000;\n        let min = (Math.floor(timeFull / msInMinute)) % 60;\n        let hours = Math.floor(timeFull / msInHour);\n        if (stop) {\n            min = (Math.floor(timerLength / msInMinute)) % 60;\n            hours = Math.floor(timerLength / msInHour);\n        }\n        if (min < 0)\n            min = 0;\n        if (hours < 0)\n            hours = 0;\n        let retString = hours + \":\" + min;\n        if (min < 10)\n            retString = hours + \":0\" + min;\n        return retString;\n    };\n\n    getSeconds = (timerStart, timerLength, stop, now) => {\n        let diff = now - timerStart;\n        let timeFull = timerLength - diff;\n        let msInSecond = 1000;\n        let sec = (Math.floor(timeFull / msInSecond)) % 60;\n        if (stop)\n            sec = (Math.floor(timerLength / msInSecond)) % 60;\n        if (sec < 0)\n            sec = 0;\n        if (sec < 10)\n            return \"0\" + sec;\n        return sec + \"\";\n    }\n\n    timeDisplay = (timerStart, timerLength, stop, now) => {\n        return this.getHoursAndMinutes(timerStart, timerLength, stop, now) +\n            \":\" + this.getSeconds(timerStart, timerLength, stop, now);\n    }\n\n    calculatePercent = (timerStart, timerLength, stop, now) => {\n        if (stop)\n            return 100;\n        let diff = now - timerStart;\n        let pct = 100 - 100 * (diff / timerLength);\n        if (pct < 0)\n            return 0;\n        return pct;\n    }\n\n    displaySecondTimer = (altStop, timerStart, now) => {\n        if (!altStop) {\n            let timeFull = now - timerStart;\n            let msInHour = 3600000;\n            let msInMinute = 60000;\n            let min = (Math.floor(timeFull / msInMinute)) % 60;\n            let hours = Math.floor(timeFull / msInHour);\n            if (min < 0)\n                min = 0;\n            if (hours < 0)\n                hours = 0;\n            let retString = hours + \":\" + min;\n            if (min < 10)\n                retString = hours + \":0\" + min;\n            return \"Time since last fast - \" + retString;\n        }\n        return '';\n    }\n\n    render() {\n        const {\n            stop,\n            altStop,\n            timerLength,\n            timerStart,\n            now\n        } = this.props;\n\n        return (\n            <div className=\"timer\">\n                <div className=\"timerCircle\">\n                    <Progress type=\"circle\"\n                        percent={this.calculatePercent(timerStart, timerLength, stop, now)}\n                        format={() => this.timeDisplay(timerStart, timerLength, stop, now)}\n                        width={200}\n                    />\n                    <div className=\"AltTimer\">\n                        {this.displaySecondTimer(altStop, timerStart, now)}\n                    </div>\n                    <div className=\"Message\">\n                        <Message\n                            stop={stop}\n                            timerLength={timerLength}\n                            timerStart={timerStart} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer","import React from 'react';\n\nimport './Resources.css';\n\nconst Resources = () => {\n    return (\n        <div className=\"resources\">\n            <h2>Additional Resources</h2>\n            <a target=\"_blank\" href=\"https://www.healthline.com/nutrition/intermittent-fasting-guide\">\n                Intermittent Fasting 101 — The Ultimate Beginner's Guide\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.healthline.com/nutrition/6-ways-to-do-intermittent-fasting\">\n                6 Popular Ways to Do Intermittent Fasting\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.health.harvard.edu/blog/intermittent-fasting-surprising-update-2018062914156\">\n                Harvard Health Blog Article\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.webmd.com/diet/news/20191226/intermittent-fasting-diet-could-boost-your-health#1\">\n                Intermittent Fasting Health Impacts\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.medicalnewstoday.com/articles/327398\">\n                Intermittent Fasting Tips\n                </a>\n        </div>\n    )\n}\nexport default Resources;","import React, { Component } from 'react';\nimport './HistoryBody.css';\nimport { isEmpty } from \"lodash\";\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Input } from 'antd';\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showFastID: [],\n        }\n    }\n\n    timeStamp = (time, long) => {\n        let months = [\"January\", \"February\", \"March\",\n            \"April\", \"May\", \"June\", \"July\", \"August\", \"September\",\n            \"October\", \"November\", \"December\"];\n        let output = '';\n        let date = new Date(time);\n\n        output += months[date.getMonth()] + ' ';\n        output += date.getDate() + ', ';\n        output += date.getFullYear();\n\n        if (long) {\n            output += ' at ';\n\n            let hours = date.getHours();\n            let amOrPm = \"AM\"\n            if (hours > 12 && hours < 24) {\n                hours -= 12;\n                amOrPm = \"PM\";\n            } else if (hours === 24) {\n                hours = 12\n                amOrPm = \"AM\"\n            }\n\n            output += hours + ':';\n\n            let minutes = date.getMinutes();\n            let minOutput = '' + minutes;\n            if (minutes < 10)\n                minOutput = \"0\" + minutes;\n\n            output += minOutput + \":\";\n\n            let seconds = date.getSeconds();\n            let secOutput = '' + seconds;\n            if (seconds < 10)\n                secOutput = \"0\" + seconds;\n\n            output += secOutput + \" \" + amOrPm;\n        }\n\n        return output;\n    }\n\n    handleExpand = (id) => {\n        if (isEmpty(this.state.showFastID)) {\n            this.setState({\n                showFastID: [id],\n            })\n        } else {\n            this.setState({\n                showFastID: [...this.state.showFastID, id],\n            })\n        }\n\n    }\n\n    handleUnexpand = (id) => {\n        let newShowFastID = this.state.showFastID.filter(fast => fast !== id);\n        this.setState({\n            showFastID: newShowFastID,\n        })\n    }\n\n    handleNoteInput(e) {\n        this.props.setState({\n            note: e.target.value\n        })\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"historyBody\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n\n                {this.props.fasts.map(fast => {\n                    let startShort = this.timeStamp(fast.startDate, false)\n                    let startLong = this.timeStamp(fast.startDate, true)\n                    let endLong = this.timeStamp(fast.endDate, true)\n\n                    let plannedTimes = this.props.parseTime(fast.plannedTime);\n                    let plannedHours = plannedTimes[0];\n                    let plannedMinutes = plannedTimes[1];\n                    let plannedSeconds = plannedTimes[2];\n\n                    let actualTimes = this.props.parseTime(fast.actualTime);\n                    let actualHours = actualTimes[0];\n                    let actualMinutes = actualTimes[1];\n                    let actualSeconds = actualTimes[2];\n\n                    return (\n                        <div className=\"card\">\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography className=\"heading\">\n                                        <div className=\"topLevelInfo\">\n\n                                            {startShort}{\" - \"}{\" \"}\n                                            {fast.passed &&\n                                                <p style={{ color: 'green', display: \"inline\" }}>PASS</p>\n                                            }\n                                            {!fast.passed &&\n                                                <p style={{ color: 'red', display: \"inline\" }}>FAIL</p>\n                                            }\n                                        </div>\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <Typography>\n                                        <div className=\"moreInfo\">\n                                            {/* {this.state.showFastID.includes(fast.id) && */}\n                                            <div className=\"expandedView\" id=\"historyCard\">\n                                                <li><p className=\"infoLabel\">Start: </p>{startLong}</li>\n                                                <li><p className=\"infoLabel\">End: </p>{endLong}</li>\n                                                <li><p className=\"infoLabel\">Planned Time: </p>{plannedHours} h, {plannedMinutes} m, {plannedSeconds} s</li>\n                                                <li><p className=\"infoLabel\">Actual Time: </p>{actualHours} h, {actualMinutes} m, {actualSeconds} s </li>\n                                                <li><p className=\"infoLabel\">Status: </p>{fast.status}</li>\n                                                <li><p className=\"infoLabel\">Note: </p>\n                                                    <Input.TextArea\n                                                        placeholder=\"\"\n                                                        value={fast.note}\n                                                        onChange={(e) => this.props.editNote(e.target.value, fast.id)}\n                                                        autoSize={{ maxRows: 3 }}\n                                                    /></li>\n                                            </div>\n                                            {/* } */}\n                                        </div>\n                                    </Typography>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </div>\n                    );\n                })}\n            </div>\n        )\n    }\n}\n\nexport default HistoryBody","import React, { Component } from 'react';\nimport './History.css';\nimport { isEmpty } from \"lodash\";\nimport HistoryBody from './HistoryBody.js';\n\nclass History extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            note: ''\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"history\">\n                <div className=\"sectionHeader\"><h2>History</h2></div>\n                {isEmpty(this.props.fasts) &&\n                    <div className=\"emptyMessage\">\n                        No fasts yet. Select a template fast or create a custom fast to start!\n                    </div>\n                }\n\n                {!isEmpty(this.props.fasts) &&\n                    <HistoryBody\n                        fasts={this.props.fasts}\n                        parseTime={this.props.parseTime}\n                        editNote={this.props.editNote}\n                    />\n                }\n            </div>\n        );\n    }\n}\n\nexport default History","import React, { Component } from 'react';\nimport './Records.css';\nimport { Progress } from 'antd';\n\nclass Records extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    findLongestFast(fasts) {\n        var time = 0;\n        fasts.map(fast => {\n            if (fast.actualTime > time) {\n                time = fast.actualTime\n            }\n        })\n        return time;\n    }\n    findShortestFast(fasts) {\n        var time = fasts[0].actualTime;\n        fasts.map(fast => {\n            if (fast.actualTime < time) {\n                time = fast.actualTime\n            }\n        })\n        return time;\n    }\n    passRate(fasts) {\n        var pass = 0;\n        var fail = 0;\n        fasts.map(fast => {\n            if (fast.passed) {\n                pass++;\n            } else {\n                fail++;\n            }\n        })\n        return pass / (pass + fail);\n    }\n\n    render() {\n\n        const list = this.props.fasts;\n        if (list.length > 0) {\n            const longTime = this.props.parseTime(this.findLongestFast(list));\n            const shortTime = this.props.parseTime(this.findShortestFast(list));\n            const passRate = this.passRate(list) * 100;\n            var message = \"You're doing great!\";\n            if (passRate < .5) {\n                message = 'Try setting shorter goals and work your way up!'\n            }\n            return (\n                <div className=\"records\">\n                    <h2>Records</h2>\n                    <p>Longest Fast: {longTime[0]} h, {longTime[1]} m, {longTime[2]} s</p>\n                    <p>Shortest Fast: {shortTime[0]} h, {shortTime[1]} m, {shortTime[2]} s</p>\n                    <b>Pass Rate: {Math.trunc(passRate)}%</b>\n                    <Progress\n                        percent={passRate}\n                        showInfo={false}\n                        trailColor=\"red\"\n                        strokeColor='green'\n                        strokeWidth={15}\n                    />\n                    <p>{message}</p>\n                </div>\n            );\n        }\n        return (\n            <div className=\"records\">\n                <h2>Records</h2>\n                <p>No Records yet!</p>\n            </div>\n        );\n    }\n}\n\nexport default Records","import React from 'react';\nimport './TimerControls.css';\nimport { InputNumber, Button, Radio } from 'antd';\n\n\nclass TimerControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n            ms: 0,\n            custom: false,\n        }\n    }\n\n    handleHourInput = (e) => {\n        console.log(\"e.target.value: \" + e)\n        this.setState(prevState => ({\n            hours: e,\n            ms: (e * 3600000)\n        }));\n    }\n\n    handleMinuteInput = (e) => {\n        this.setState(prevState => ({\n            minutes: e,\n            ms: (e * 60000)\n        }));\n    }\n\n    handleSecondInput = (e) => {\n        this.setState(prevState => ({\n            seconds: e,\n            ms: (e * 1000)\n        }));\n    }\n\n    calculateTotalTime = (st) => {\n        return st.seconds * 1000 + st.minutes * 60000 + st.hours * 3600000;\n    }\n\n    handleSelect = (event) => {\n        let value = event.target.value;\n        if (value === \"16-8\") {\n            this.setState({\n                custom: false,\n                hours: 16,\n                minutes: 0,\n                seconds: 0\n            });\n        } else if (value === \"18-6\") {\n            this.setState({\n                custom: false,\n                hours: 18,\n                minutes: 0,\n                seconds: 0\n            });\n        } else { //value === \"custom\"\n            this.setState({\n                custom: true\n            });\n        }\n    }\n\n    render() {\n        let options;\n        if (this.state.custom) {\n            options =\n                <div className=\"Table\">\n                    <ul id=\"horizontal-list\">\n                        <li>\n                            <label>Hours</label><br />\n                            <InputNumber\n                                min={0}\n                                max={99}\n                                value={this.state.hours}\n                                onChange={this.handleHourInput}\n                                size='large'\n                            />\n                        </li>\n                        <li>\n                            <label>Mins</label><br />\n                            <InputNumber\n                                min={0}\n                                max={59}\n                                value={this.state.minutes}\n                                onChange={this.handleMinuteInput}\n                                size='large'\n                            />\n                        </li>\n                        <li>\n                            <label>Secs</label><br />\n                            <InputNumber\n                                min={0}\n                                max={59}\n                                value={this.state.seconds}\n                                onChange={this.handleSecondInput}\n                                size='large'\n                            />\n                        </li>\n                    </ul>\n                </div>\n        } else {\n            options = null;\n        }\n\n        return (\n            <div className=\"Controls\">\n                <div className=\"buttons\">\n                    <h2 style={{ marginLeft: 40 }}>Set Timer</h2>\n                    <div className=\"StartButton\">\n                        <Button type=\"submit\"\n                            onClick={() => this.props.updatePlannedTime(this.calculateTotalTime(this.state))}\n                            type=\"primary\">Start Timer</Button>\n                    </div>\n                    <div className=\"GiveUp\">\n                        <Button type=\"submit\"\n                            onClick={() => { this.props.newFailed(); this.props.updatePlannedTime(0) }}\n                            type=\"primary\" danger>I failed :(</Button>\n                    </div>\n                </div>\n                <div>\n\n                </div>\n                <Radio.Group onChange={this.handleSelect} defaultValue=\"16:8\" className=\"select\">\n                    <Radio.Button value=\"16-8\">16:8</Radio.Button>\n                    <Radio.Button value=\"18-6\">18:6</Radio.Button>\n                    <Radio.Button value=\"custom\">Custom</Radio.Button>\n                </Radio.Group>\n                {options}\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default TimerControls","import React, { Component } from 'react';\n\nimport './App.css';\nimport Timer from './Components/Timer.js';\nimport Resources from './Components/Resources.js'\nimport History from './Components/History.js';\nimport Records from './Components/Records.js';\nimport TimerControls from './Components/TimerControls.js';\nimport './Components/TimerControls.css';\nimport Confetti from 'react-confetti'\n\nconst failedFastsMessages = [\n  'Some room for improvement!',\n  'You got this next time!',\n  'Failure is an inevitable part of success!'\n];\n\nconst successFastsMessages = [\n  'Good job!',\n  'Health guru!',\n  'Nice!'\n];\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n\n      fasts: [\n        {\n          startDate: 1589836641396,\n          endDate: 1589836650000,\n          actualTime: 9000,\n          plannedTime: 9000,\n          passed: true,\n          status: 'Good job!',\n          id: 0,\n          note: '',\n        },\n        {\n          startDate: 1289836641396,\n          endDate: 1289836680000,\n          actualTime: 20000,\n          plannedTime: 39000,\n          passed: false,\n          status: 'Some room for improvement!',\n          id: 1,\n          note: '',\n        },\n        {\n          startDate: 1589836641396,\n          endDate: 1589836650000,\n          actualTime: 9000,\n          plannedTime: 9000,\n          passed: true,\n          status: 'Good job!',\n          id: 0,\n          note: '',\n        },\n        {\n          startDate: 1289836641396,\n          endDate: 1289836680000,\n          actualTime: 20000,\n          plannedTime: 39000,\n          passed: false,\n          status: 'Some room for improvement!',\n          id: 1,\n          note: '',\n        },\n        {\n          startDate: 1589836641396,\n          endDate: 1589836650000,\n          actualTime: 9000,\n          plannedTime: 9000,\n          passed: true,\n          status: 'Good job!',\n          id: 0,\n          note: '',\n        },\n        {\n          startDate: 1289836641396,\n          endDate: 1289836680000,\n          actualTime: 20000,\n          plannedTime: 39000,\n          passed: false,\n          status: 'Some room for improvement!',\n          id: 1,\n          note: '',\n        }\n      ],\n      timerTime: 18 * 60 * 60 * 1000,\n      timerStart: 0,\n      currentTime: Date.now(),\n      stop: true,\n      altStop: true,\n      confetti: false,\n      recycle: true,\n      stopTime: 0,\n    }\n    this.updatePlannedTime = this.updatePlannedTime.bind(this);\n    this.newSuccess = this.newSuccess.bind(this);\n    this.newFailed = this.newFailed.bind(this);\n    this.parseTime = this.parseTime.bind(this);\n    this.editNote = this.editNote.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ currentTime: Date.now() }), 20);\n  }\n\n  componentDidUpdate() {\n    if (!this.state.stop &&\n      ((this.state.timerTime + this.state.timerStart <= this.state.currentTime + 10)\n        && (this.state.timerTime + this.state.timerStart >= this.state.currentTime - 10))) {\n      this.newSuccess();\n    }\n    if (!this.state.altStop && (this.state.currentTime - this.state.stopTime >= 3000) && this.state.recycle) {\n      this.stopRecycle();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updatePlannedTime = (msTime) => {\n    if (msTime === 0) {\n      this.setState({\n        stop: true,\n      })\n    } else {\n      this.setState({\n        timerTime: msTime,\n        timerStart: Date.now(),\n        stop: false,\n        altStop: true,\n      });\n    }\n  }\n\n  newSuccess = () => {\n    let newID = 0;\n    if (this.state.fasts.length !== 0)\n      newID = this.state.fasts[this.state.fasts.length - 1].id + 1;\n    const successFast = {\n      startDate: this.state.timerStart,\n      endDate: this.state.currentTime,\n      actualTime: this.state.timerTime,\n      plannedTime: this.state.timerTime,\n      passed: true,\n      id: newID,\n      status: successFastsMessages[Math.floor(Math.random() * successFastsMessages.length)],\n      note: '',\n    }\n    const newFastList = [...this.state.fasts, successFast]\n    console.log(this.state.timerTime)\n    this.setState(prevState => ({\n      fasts: newFastList,\n      timerStart: prevState.currentTime,\n      stop: true,\n      altStop: false,\n      confetti: true,\n      recycle: true,\n      stopTime: Date.now(),\n    }));\n  }\n\n  newFailed = () => {\n    if (!this.state.stop) {\n      let newID = 0;\n      if (this.state.fasts.length !== 0)\n        newID = this.state.fasts[this.state.fasts.length - 1].id + 1;\n      const failedFast = {\n        startDate: this.state.timerStart,\n        endDate: this.state.currentTime,\n        actualTime: this.state.currentTime - this.state.timerStart,\n        plannedTime: this.state.timerTime,\n        passed: false,\n        id: newID,\n        status: failedFastsMessages[Math.floor(Math.random() * failedFastsMessages.length)],\n        note: '',\n      }\n      const newFastList = [...this.state.fasts, failedFast]\n      console.log(this.state.timerTime)\n      this.setState(prevState => ({\n        fasts: newFastList,\n        timerStart: prevState.currentTime,\n        stop: true,\n        altStop: false,\n      }));\n    }\n  }\n\n  parseTime = (time) => {\n    let totalInSeconds = time / 1000;\n\n    let hours = Math.floor(totalInSeconds / 3600);\n    let remaining = totalInSeconds % 3600;\n\n    let minutes = Math.floor(remaining / 60);\n    let seconds = remaining % 60;\n\n    return [hours, minutes, seconds];\n  }\n\n  editNote(newText, key) {\n    const list = this.state.fasts\n    list.map(fast => {\n      if (fast.id === key) {\n        fast.note = newText\n      }\n    });\n    this.setState({\n      fasts: list\n    })\n  }\n\n  stopRecycle = () => {\n    this.setState({\n      recycle: false\n    })\n  }\n\n  calculatePercent = (timerStart, timerLength, stop) => {\n    if (stop)\n      return 100;\n    let diff = Date.now() - timerStart;\n    let pct = 100 - 100 * (diff / timerLength);\n    if (pct < 0)\n      return 0;\n    return pct;\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\" onClick={() => this.setState({ recycle: false })}>\n        <h1 className=\"dummyHeader\">Intermittent Fasting Tracker!</h1>\n        <div className=\"grid\">\n          {this.state.confetti &&\n            <Confetti\n              recycle={this.state.recycle}\n            />\n          }\n          <TimerControls\n            updatePlannedTime={this.updatePlannedTime}\n            newFailed={this.newFailed} />\n          <Timer stop={this.state.stop}\n            altStop={this.state.altStop}\n            timerLength={this.state.timerTime}\n            timerStart={this.state.timerStart}\n            now={this.state.currentTime}\n            confetti={this.state.confetti} />\n          <History\n            fasts={this.state.fasts}\n            parseTime={this.parseTime}\n            editNote={this.editNote} />\n          <Records\n            fasts={this.state.fasts}\n            parseTime={this.parseTime} />\n          <Resources />\n        </div>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}