{"version":3,"sources":["Components/Message.js","Components/Timer.js","Components/Resources.js","Components/HistoryBody.js","Components/History.js","Components/Records.js","Components/TimerControls.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","calculatePercent","timerStart","timerLength","stop","pct","Date","now","handleMsg","percent","num","newNum","goal","state","percentGoal","Math","floor","random","messages","length","setState","messageID","oldMessageID","bind","nextState","this","className","style","verticalAlign","display","justifyContent","Component","Timer","getHoursAndMinutes","timeFull","min","hours","retString","getSeconds","sec","timeDisplay","displaySecondTimer","altStop","type","format","width","marginLeft","confetti","Resources","target","href","HistoryBody","timeStamp","time","long","output","date","getMonth","getDate","getFullYear","getHours","amOrPm","minutes","getMinutes","minOutput","seconds","secOutput","handleExpand","id","isEmpty","showFastID","handleUnexpand","newShowFastID","filter","fast","flexWrap","fasts","map","startShort","startDate","startLong","endLong","endDate","plannedTimes","parseTime","plannedTime","plannedHours","plannedMinutes","plannedSeconds","actualTimes","actualTime","actualHours","actualMinutes","actualSeconds","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","passed","color","ExpansionPanelDetails","status","History","Records","pass","fail","list","longTime","findLongestFast","shortTime","findShortestFast","passRate","message","trunc","showInfo","trailColor","strokeColor","strokeWidth","TimerControls","handleHourInput","e","console","log","prevState","ms","handleMinuteInput","handleSecondInput","calculateTotalTime","st","handleSelect","event","value","custom","options","max","onChange","size","onClick","updatePlannedTime","newFailed","Group","defaultValue","Button","React","failedFastsMessages","successFastsMessages","App","msTime","timerTime","newSuccess","newID","successFast","currentTime","newFastList","recycle","stopTime","failedFast","totalInSeconds","remaining","stopRecycle","interval","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c780d49a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\nimport \"antd/dist/antd.css\";\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [\n                'You got this!',\n                'WILLPOWER!!',\n                'What is hunger anyways?',\n            ],\n            oldMessageID: 0,\n            messageID: 0,\n            percentGoal: 90,\n\n        }\n\n        this.handleMsg = this.handleMsg.bind(this);\n    }\n\n    calculatePercent = (timerStart, timerLength, stop) => {\n        if (stop)\n            return 100;\n        let diff = Date.now() - timerStart;\n        let pct = 100 - 100 * (diff / timerLength);\n        if (pct < 0)\n            return 0;\n        return pct;\n    }\n\n    handleMsg = (percent, num, stop, timerLength) => {\n        let newNum = num;\n        let goal = this.state.percentGoal;\n        let changeMessage = true;\n\n        // if (goal === 90 && percent <= 10) {\n        //     changeMessage = false;\n        // }\n\n        if (percent < goal && changeMessage && percent !== 0 && percent !== 100 && timerLength >= 10000) {\n            newNum = Math.floor(Math.random() * this.state.messages.length);\n            while (newNum === num) {\n                newNum = Math.floor(Math.random() * this.state.messages.length);\n            }\n        //    console.log(goal)\n        //     if (goal - 10 === 10) {\n        //         console.log(\"happened\");\n        //         goal = 90;\n        //     } else {\n        //         goal -= 10;\n        //     }\n\n\n            this.setState({\n                percentGoal: goal - 10,\n                messageID: newNum\n            })\n        }\n    }\n\n    shouldComponentUpdate(nextState) {\n        return this.state.percentGoal !== nextState.percentGoal }\n\n    componentDidUpdate() {\n        if (this.state.percentGoal === 0 && \n            this.calculatePercent(this.props.timerStart, this.props.timerLength, this.props.stop) === 100) {\n            this.setState({\n                percentGoal: 90,\n            })\n        }\n    }\n\n    render() {\n        const {\n            stop,\n            timerLength,\n            timerStart,\n        } = this.props;\n        let percent = this.calculatePercent(timerStart, timerLength, stop);\n\n        this.handleMsg(percent, this.state.messageID, stop, timerLength);\n        // console.log(\"percent: \" + percent + \" percentGoal: \" + this.state.percentGoal);\n        // if (percent === 0) {\n        //     console.log(\"percentGoal: \" + this.state.percentGoal);\n        // }\n\n        return (\n            <div className=\"timer\" style={{ verticalAlign: \"center\" }}>\n                <br /><br />\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>{this.state.messages[this.state.messageID]}</div>\n            </div>\n        );\n    }\n\n}\n\nexport default Message","import React, { Component } from 'react';\nimport './Timer.css';\nimport { Progress } from 'antd';\nimport \"antd/dist/antd.css\";\nimport Message from './Message.js';\n\nclass Timer extends Component {\n\n\n    //gives the difference between timer in the format: \"(Hours):(Minutes)\"\n    getHoursAndMinutes = (timerStart, timerLength, stop, now) => {\n        let diff = now - timerStart;\n        let timeFull = timerLength - diff;\n        let msInHour = 3600000;\n        let msInMinute = 60000;\n        let min = (Math.floor(timeFull / msInMinute)) % 60;\n        let hours = Math.floor(timeFull / msInHour);\n        if (stop) {\n            min = (Math.floor(timerLength / msInMinute)) % 60;\n            hours = Math.floor(timerLength / msInHour);\n        }\n        if (min < 0)\n            min = 0;\n        if (hours < 0)\n            hours = 0;\n        let retString = hours + \":\" + min;\n        if (min < 10)\n            retString = hours + \":0\" + min;\n        return retString;\n    };\n\n    getSeconds = (timerStart, timerLength, stop, now) => {\n        let diff = now - timerStart;\n        let timeFull = timerLength - diff;\n        let msInSecond = 1000;\n        let sec = (Math.floor(timeFull / msInSecond)) % 60;\n        if (stop)\n            sec = (Math.floor(timerLength / msInSecond)) % 60;\n        if (sec < 0)\n            sec = 0;\n        if (sec < 10)\n            return \"0\" + sec;\n        return sec + \"\";\n    }\n\n    timeDisplay = (timerStart, timerLength, stop, now) => {\n        return this.getHoursAndMinutes(timerStart, timerLength, stop, now) +\n            \":\" + this.getSeconds(timerStart, timerLength, stop, now);\n    }\n\n    calculatePercent = (timerStart, timerLength, stop, now) => {\n        if (stop)\n            return 100;\n        let diff = now - timerStart;\n        let pct = 100 - 100 * (diff / timerLength);\n        if (pct < 0)\n            return 0;\n        return pct;\n    }\n\n    displaySecondTimer = (altStop, timerStart, now) => {\n        if (!altStop) {\n            let timeFull = now - timerStart;\n            let msInHour = 3600000;\n            let msInMinute = 60000;\n            let min = (Math.floor(timeFull / msInMinute)) % 60;\n            let hours = Math.floor(timeFull / msInHour);\n            if (min < 0)\n                min = 0;\n            if (hours < 0)\n                hours = 0;\n            let retString = hours + \":\" + min;\n            if (min < 10)\n                retString = hours + \":0\" + min;\n            let hr = \"hours\";\n            if (hours === 1)\n                hr = \"hour\";\n            return \"Time since last fast - \" + retString;\n        }\n        return '';\n    }\n\n    render() {\n        const {\n            stop,\n            altStop,\n            timerLength,\n            timerStart,\n            now\n        } = this.props;\n        \n        return (\n            <div className=\"timer\" style={{ verticalAlign: \"center\" }}>\n\n                <Progress type=\"circle\"\n                    percent={this.calculatePercent(timerStart, timerLength, stop, now)}\n                    format={() => this.timeDisplay(timerStart, timerLength, stop, now)}\n                    width={200}\n                    style={{ marginLeft: 100 }}\n                />\n                <div>\n                    {this.displaySecondTimer(altStop, timerStart, now)}\n                </div>\n\n                <div className=\"message\">\n                    <Message stop={stop} timerLength={timerLength} timerStart={timerStart} confetti={this.props.confetti} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer","import React from 'react';\n\nimport './Resources.css';\n\nconst Resources = () => {\n    return (\n        <div className=\"resources\">\n            <h2>Additional Resources</h2>\n            <a target=\"_blank\" href=\"https://www.healthline.com/nutrition/intermittent-fasting-guide\">\n                Intermittent Fasting 101 — The Ultimate Beginner's Guide\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.healthline.com/nutrition/6-ways-to-do-intermittent-fasting\">\n                6 Popular Ways to Do Intermittent Fasting\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.health.harvard.edu/blog/intermittent-fasting-surprising-update-2018062914156\">\n                Harvard Health Blog Article\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.webmd.com/diet/news/20191226/intermittent-fasting-diet-could-boost-your-health#1\">\n                Intermittent Fasting Health Impacts\n                </a>\n            <div>{\" \"}</div>\n            <a target=\"_blank\" href=\"https://www.medicalnewstoday.com/articles/327398\">\n                Intermittent Fasting Tips\n                </a>\n        </div>\n    )\n}\nexport default Resources;","import React, { Component } from 'react';\nimport './HistoryBody.css';\nimport { isEmpty } from \"lodash\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showFastID: [],\n        }\n    }\n\n    timeStamp = (time, long) => {\n        let months = [\"January\", \"February\", \"March\",\n            \"April\", \"May\", \"June\", \"July\", \"August\", \"September\",\n            \"October\", \"November\", \"December\"];\n        let output = '';\n        let date = new Date(time);\n\n        output += months[date.getMonth()] + ' ';\n        output += date.getDate() + ', ';\n        output += date.getFullYear();\n\n        if (long) {\n            output += ' at ';\n\n            let hours = date.getHours();\n            let amOrPm = \"AM\"\n            if (hours > 12 && hours < 24) {\n                hours -= 12;\n                amOrPm = \"PM\";\n            } else if (hours === 24) {\n                hours = 12\n                amOrPm = \"AM\"\n            }\n\n            output += hours + ':';\n\n            let minutes = date.getMinutes();\n            let minOutput = '' + minutes;\n            if (minutes < 10)\n                minOutput = \"0\" + minutes;\n\n            output += minOutput + \":\";\n\n            let seconds = date.getSeconds();\n            let secOutput = '' + seconds;\n            if (seconds < 10)\n                secOutput = \"0\" + seconds;\n\n            output += secOutput + \" \" + amOrPm;\n        }\n\n        return output;\n    }\n\n    handleExpand = (id) => {\n        if (isEmpty(this.state.showFastID)) {\n            this.setState({\n                showFastID: [id],\n            })\n        } else {\n            this.setState({\n                showFastID: [...this.state.showFastID, id],\n            })\n        }\n\n    }\n\n    handleUnexpand = (id) => {\n        let newShowFastID = this.state.showFastID.filter(fast => fast !== id);\n        this.setState({\n            showFastID: newShowFastID,\n        })\n    }\n\n    render() {\n        \n        return (\n            <div className=\"historyBody\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                \n                {this.props.fasts.map(fast => {\n                    let startShort = this.timeStamp(fast.startDate, false)\n                    let startLong = this.timeStamp(fast.startDate, true)\n                    let endLong = this.timeStamp(fast.endDate, true)\n\n                    let plannedTimes = this.props.parseTime(fast.plannedTime);\n                    let plannedHours = plannedTimes[0];\n                    let plannedMinutes = plannedTimes[1];\n                    let plannedSeconds = plannedTimes[2];\n\n                    let actualTimes = this.props.parseTime(fast.actualTime);\n                    let actualHours = actualTimes[0];\n                    let actualMinutes = actualTimes[1];\n                    let actualSeconds = actualTimes[2];\n\n                    return (\n                        <div className=\"card\"> \n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography className=\"heading\">\n                                    <div className=\"topLevelInfo\">\n\n                                        {startShort}{\" - \"}{\" \"}\n                                        {fast.passed &&\n                                            <p style={{ color: 'green', display: \"inline\" }}>PASS</p>\n                                        }\n                                        {!fast.passed &&\n                                            <p style={{ color: 'red', display: \"inline\" }}>FAIL</p>\n                                        }\n                                    </div>\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <Typography>\n                                    <div className=\"moreInfo\">\n                                        {/* {this.state.showFastID.includes(fast.id) && */}\n                                            <div className=\"expandedView\">\n                                                <li><p className=\"infoLabel\">Start: </p>{startLong}</li>\n                                                <li><p className=\"infoLabel\">End: </p>{endLong}</li>\n                                                <li><p className=\"infoLabel\">Planned Time: </p>{plannedHours} h, {plannedMinutes} m, {plannedSeconds} s</li>\n                                                <li><p className=\"infoLabel\">Actual Time: </p>{actualHours} h, {actualMinutes} m, {actualSeconds} s </li>\n                                                <li><p className=\"infoLabel\">Status: </p>{fast.status}</li>\n                                            </div>\n                                            {/* } */}\n                                        </div>\n                                    </Typography>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </div>\n                    );\n                })}\n            </div>\n        )\n    }\n}\n\nexport default HistoryBody","import React, { Component } from 'react';\nimport './History.css';\nimport { isEmpty } from \"lodash\";\nimport HistoryBody from './HistoryBody.js';\n\nclass History extends Component {\n\n    render() {\n        return (\n            <div className=\"history\">\n                <div className=\"sectionHeader\"><h2>History</h2></div>\n                {isEmpty(this.props.fasts) &&\n                    <div className=\"emptyMessage\">\n                        No fasts yet. Select a template fast or create a custom fast to start!\n                    </div>\n                }\n\n                {!isEmpty(this.props.fasts) &&\n                    <HistoryBody \n                        fasts={this.props.fasts}\n                        parseTime={this.props.parseTime}\n                    />\n                }\n            </div>\n        );\n    }\n}\n\nexport default History","import React, { Component } from 'react';\nimport './Records.css';\nimport { Progress } from 'antd';\n\nclass Records extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    findLongestFast(fasts) {\n        var time = 0;\n        fasts.map(fast => {\n            if (fast.actualTime > time) {\n                time = fast.actualTime\n            }\n        })\n        return time;\n    }\n    findShortestFast(fasts) {\n        var time = fasts[0].actualTime;\n        fasts.map(fast => {\n            if (fast.actualTime < time) {\n                time = fast.actualTime\n            }\n        })\n        return time;\n    }\n    passRate(fasts) {\n        var pass = 0;\n        var fail = 0;\n        fasts.map(fast => {\n            if (fast.passed) {\n                pass++;\n            } else {\n                fail++;\n            }\n        })\n        return pass / (pass + fail);\n    }\n\n    render() {\n\n        const list = this.props.fasts;\n        if (list.length > 0) {\n            const longTime = this.props.parseTime(this.findLongestFast(list));\n            const shortTime = this.props.parseTime(this.findShortestFast(list));\n            const passRate = this.passRate(list) * 100;\n            var message = \"You're doing great!\";\n            if (passRate < .5) {\n                message = 'Try setting shorter goals and work your way up!'\n            }\n            return (\n                <div className=\"records\">\n                    <h2>Records</h2>\n                    <p>Longest Fast: {longTime[0]} h, {longTime[1]} m, {longTime[2]} s</p>\n                    <p>Shortest Fast: {shortTime[0]} h, {shortTime[1]} m, {shortTime[2]} s</p>\n                    <b>Pass Rate: {Math.trunc(passRate)}%</b>\n                    <Progress\n                        percent={passRate}\n                        showInfo={false}\n                        trailColor=\"red\"\n                        strokeColor='green'\n                        strokeWidth={15}\n                    />\n                    <p>{message}</p>\n                </div>\n            );\n        }\n        return (\n            <div className=\"records\">\n                <h2>Records</h2>\n                <p>No Records yet!</p>\n            </div>\n        );\n    }\n}\n\nexport default Records","import React from 'react';\nimport './TimerControls.css';\nimport { InputNumber, Button, Form, Input, Radio } from 'antd';\n\n\nclass TimerControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n            ms: 0,\n            custom: false,\n        }\n    }\n\n    handleHourInput = (e) => {\n        console.log(\"e.target.value: \" + e)\n        this.setState(prevState => ({\n            hours: e,\n            ms: (e * 3600000)\n        }));\n    }\n\n    handleMinuteInput = (e) => {\n        this.setState(prevState => ({\n            minutes: e,\n            ms: (e * 60000)\n        }));\n    }\n\n    handleSecondInput = (e) => {\n        this.setState(prevState => ({\n            seconds: e,\n            ms: (e * 1000)\n        }));\n    }\n\n    calculateTotalTime = (st) => {\n        return st.seconds * 1000 + st.minutes * 60000 + st.hours * 3600000;\n    }\n\n    handleSelect = (event) => {\n        let value = event.target.value;\n        if (value === \"16-8\") {\n            this.setState({\n                custom: false,\n                hours: 16,\n                minutes: 0,\n                seconds: 0\n            });\n        } else if (value === \"18-6\") {\n            this.setState({\n                custom: false,\n                hours: 18,\n                minutes: 0,\n                seconds: 0\n            });\n        } else { //value === \"custom\"\n            this.setState({\n                custom: true\n            });\n        }\n    }\n\n    render() {\n        let options;\n        if (this.state.custom) {\n            options =\n                <div className=\"Table\">\n                    <ul id=\"horizontal-list\">\n                        <li>\n                            <label>Hours</label><br />\n                            <InputNumber\n                                min={0}\n                                max={99}\n                                value={this.state.hours}\n                                onChange={this.handleHourInput}\n                                size='large'\n                            />\n                        </li>\n                        <li>\n                            <label>Mins</label><br />\n                            <InputNumber\n                                min={0}\n                                max={59}\n                                value={this.state.minutes}\n                                onChange={this.handleMinuteInput}\n                                size='large'\n                            />\n                        </li>\n                        <li>\n                            <label>Secs</label><br />\n                            <InputNumber\n                                min={0}\n                                max={59}\n                                value={this.state.seconds}\n                                onChange={this.handleSecondInput}\n                                size='large'\n                            />\n                        </li>\n                    </ul>\n                </div>\n        } else {\n            options = null;\n        }\n\n        return (\n            <div className=\"Controls\">\n                <div className=\"buttons\">\n\n                    <div className=\"StartButton\">\n                        <Button type=\"submit\"\n                            onClick={() => this.props.updatePlannedTime(this.calculateTotalTime(this.state))}\n                            type=\"primary\">Start Timer</Button>\n                    </div>\n                    <div className=\"GiveUp\">\n                        <Button type=\"submit\"\n                            onClick={() => { this.props.newFailed(); this.props.updatePlannedTime(0) }}\n                            type=\"primary\" danger>I failed :(</Button>\n                    </div>\n                </div>\n                <div>\n\n                </div>\n                <Radio.Group onChange={this.handleSelect} defaultValue=\"16:8\" className=\"select\">\n                    <Radio.Button value=\"16-8\">16:8</Radio.Button>\n                    <Radio.Button value=\"18-6\">18:6</Radio.Button>\n                    <Radio.Button value=\"custom\">Custom</Radio.Button>\n                </Radio.Group>\n                {options}\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default TimerControls","import React, { Component } from 'react';\nimport { PageHeader } from 'antd';\n\nimport './App.css';\nimport Timer from './Components/Timer.js';\nimport Resources from './Components/Resources.js'\nimport History from './Components/History.js';\nimport Records from './Components/Records.js';\nimport TimerControls from './Components/TimerControls.js';\nimport './Components/TimerControls.css';\nimport Confetti from 'react-confetti'\n\nconst failedFastsMessages = [\n  'Some room for improvement!',\n  'You got this next time!',\n  'Failure is an inevitable part of success!'\n];\n\nconst successFastsMessages = [\n  'Good job!',\n  'Health guru!',\n  'Nice!'\n];\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      fasts: [],\n      timerTime: 18 * 60 * 60 * 1000,\n      timerStart: 0,\n      currentTime: Date.now(),\n      stop: true,\n      altStop: true,\n      confetti: false,\n      recycle: true,\n      stopTime: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ currentTime: Date.now() }), 20);\n  }\n\n  componentDidUpdate() {\n    if (!this.state.stop &&\n      ((this.state.timerTime + this.state.timerStart <= this.state.currentTime + 10)\n        && (this.state.timerTime + this.state.timerStart >= this.state.currentTime - 10))) {\n      this.newSuccess();\n    }\n    if (!this.state.altStop && (this.state.currentTime - this.state.stopTime >= 3000) && this.state.recycle) {\n      this.stopRecycle();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updatePlannedTime = (msTime) => {\n    if (msTime === 0) {\n      this.setState({\n        stop: true,\n      })\n    } else {\n      this.setState({\n        timerTime: msTime,\n        timerStart: Date.now(),\n        stop: false,\n        altStop: true,\n      });\n    }\n  }\n\n  newSuccess = () => {\n    let newID = 0;\n    if (this.state.fasts.length !== 0)\n      newID = this.state.fasts[this.state.fasts.length - 1].id + 1;\n    const successFast = {\n      startDate: this.state.timerStart,\n      endDate: this.state.currentTime,\n      actualTime: this.state.timerTime,\n      plannedTime: this.state.timerTime,\n      passed: true,\n      id: newID,\n      status: successFastsMessages[Math.floor(Math.random() * successFastsMessages.length)],\n    };\n    const newFastList = [...this.state.fasts, successFast];\n    this.setState(prevState => ({\n      fasts: newFastList,\n      timerStart: prevState.currentTime,\n      stop: true,\n      altStop: false,\n      confetti: true,\n      recycle: true,\n      stopTime: Date.now(),\n    }));\n  }\n\n  newFailed = () => {\n    if (!this.state.stop) {\n      let newID = 0;\n      if (this.state.fasts.length !== 0)\n        newID = this.state.fasts[this.state.fasts.length - 1].id + 1;\n      const failedFast = {\n        startDate: this.state.timerStart,\n        endDate: this.state.currentTime,\n        actualTime: this.state.currentTime - this.state.timerStart,\n        plannedTime: this.state.timerTime,\n        passed: false,\n        id: newID,\n        status: failedFastsMessages[Math.floor(Math.random() * failedFastsMessages.length)],\n      };\n      const newFastList = [...this.state.fasts, failedFast];\n      this.setState(prevState => ({\n        fasts: newFastList,\n        timerStart: prevState.currentTime,\n        stop: true,\n        altStop: false,\n      }));\n    }\n  }\n\n  parseTime = (time) => {\n    let totalInSeconds = time / 1000;\n\n    let hours = Math.floor(totalInSeconds / 3600);\n    let remaining = totalInSeconds % 3600;\n\n    let minutes = Math.floor(remaining / 60);\n    let seconds = remaining % 60;\n\n    return [hours, minutes, seconds];\n  }\n\n  stopRecycle = () => {\n    this.setState({\n      recycle: false\n    })\n  }\n\n  calculatePercent = (timerStart, timerLength, stop) => {\n    if (stop)\n        return 100;\n    let diff = Date.now() - timerStart;\n    let pct = 100 - 100 * (diff / timerLength);\n    if (pct < 0)\n        return 0;\n    return pct;\n}\n\n  render() {\n    return (\n      \n      <div className=\"App\" onClick={() => this.setState({recycle: false})}>\n        <h1 className=\"dummyHeader\">Intermittent Fasting Tracker!</h1>\n        <div className=\"grid\">\n          {this.state.confetti &&\n            <Confetti\n            recycle={this.state.recycle}\n            />\n          }\n          <TimerControls\n            updatePlannedTime={this.updatePlannedTime}\n            newFailed={this.newFailed} />\n          <Timer stop={this.state.stop}\n            altStop={this.state.altStop}\n            timerLength={this.state.timerTime}\n            timerStart={this.state.timerStart}\n            now={this.state.currentTime} \n            confetti={this.state.confetti}/>\n          <History\n            fasts={this.state.fasts}\n            parseTime={this.parseTime} />\n          <Records\n            fasts={this.state.fasts}\n            parseTime={this.parseTime} />\n          <Resources />\n        </div>\n\n      </div>\n    );\n    \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}